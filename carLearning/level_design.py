import numpy as np
import line_class
import physics_engine

def pathCreator(l1,goalL):
    '''computes the path we want, avoiding to create a line on the arrival'''
    l=[line_class.Line(physics_engine.universal_scaler * l1[i][0], physics_engine.universal_scaler * l1[i][1],
                       physics_engine.universal_scaler * l1[i + 1][0], physics_engine.universal_scaler * l1[i + 1][1]) for i in range(len(l1)-1) if ((goalL[0][0]!=l1[i:i+2][0][0] or goalL[0][1]!=l1[i:i+2][0][1]) or (goalL[1][0]!=l1[i:i+2][1][0] or goalL[1][1]!=l1[i:i+2][1][1]))]
    l.append(line_class.Line(physics_engine.universal_scaler * l1[0][0], physics_engine.universal_scaler * l1[0][1],
                             physics_engine.universal_scaler * l1[-1][0], physics_engine.universal_scaler * l1[-1][1]))
    return(l)

def level1():
    A=np.array(([50,50]))
    B=np.array(([250,50]))
    C=np.array(([450,100]))
    D=np.array(([600,200]))
    E=np.array(([650,350]))
    F=np.array(([650,450]))
    G=np.array(([600,600]))
    H=np.array(([450,750]))
    I=np.array(([350,850]))
    J=np.array(([400,1000]))
    K=np.array(([600,1050]))
    L=np.array(([750,1050]))
    M=np.array(([850,950]))
    N=np.array(([900,850]))
    O=np.array(([900,500]))
    P=np.array(([1000,500]))
    Q=np.array(([1000,850]))
    R=np.array(([950,950]))
    S=np.array(([800,1150]))
    T=np.array(([600,1200]))
    U=np.array(([400,1200]))
    V=np.array(([250,1050]))
    W=np.array(([200,900]))
    X=np.array(([250,750]))
    Y=np.array(([400,650]))
    Z=np.array(([450,550]))
    A1=np.array(([500,450]))
    B1=np.array(([500,300]))
    C1=np.array(([400,200]))
    D1=np.array(([250,150]))
    E1=np.array(([50,150]))
    lines = np.array(pathCreator([A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1],[O,P]))
    return(lines)
    
def level2():
    A=np.array(([50,50]))
    B=np.array(([250,50]))
    C=np.array(([450,100]))
    D=np.array(([600,200]))
    E=np.array(([650,350]))
    F=np.array(([650,450]))
    G=np.array(([600,600]))
    H=np.array(([450,750]))
    I=np.array(([350,850]))
    J=np.array(([400,1000]))
    K=np.array(([600,1050]))
    L=np.array(([750,1050]))
    M=np.array(([850,950]))
    N=np.array(([900,850]))
    O=np.array(([900,500]))
    P=np.array(([1000,500]))
    Q=np.array(([1000,850]))
    R=np.array(([950,950]))
    S=np.array(([800,1150]))
    T=np.array(([600,1200]))
    U=np.array(([400,1200]))
    V=np.array(([250,1050]))
    W=np.array(([200,900]))
    X=np.array(([250,750]))
    Y=np.array(([400,650]))
    Z=np.array(([500,550]))
    A1=np.array(([550,450]))
    B1=np.array(([500,300]))
    C1=np.array(([400,200]))
    D1=np.array(([250,150]))
    E1=np.array(([50,150]))
    lines=np.array(pathCreator([A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1],[O,P]))
    lines[:,:,1]=-lines[:,:,1]
    return(line)
